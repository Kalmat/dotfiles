From 4220ecf04397294a7c4f5cd1c138e1fa073fc909 Mon Sep 17 00:00:00 2001
From: nagaohiroki <zerosiseinokae@yahoo.co.jp>
Date: Fri, 12 Aug 2016 12:27:41 +0900
Subject: [PATCH] windows10 japanese fix

---
 autoload/OmniSharp.vim |  8 +++++---
 python/Completion.py   |  4 ++++
 python/OmniSharp.py    | 14 ++++++++++----
 python/asyncrequest.py |  7 ++-----
 python/syncrequest.py  |  7 ++-----
 5 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/autoload/OmniSharp.vim b/autoload/OmniSharp.vim
index c75ebce..dea4b37 100644
--- a/autoload/OmniSharp.vim
+++ b/autoload/OmniSharp.vim
@@ -498,10 +498,12 @@ endfunction
 
 function! OmniSharp#ResolveLocalConfig(solutionPath) abort
   let result = ''
-  let configPath = fnamemodify(a:solutionPath, ':p:h')
-  \ . s:dir_separator
-  \ . g:OmniSharp_server_config_name
+ " let configPath = fnamemodify(a:solutionPath, ':p:h')
+ " \ . s:dir_separator
+ " \ . g:OmniSharp_server_config_name
 
+  let configPath = g:OmniSharp_server_config_name
+  echo configPath
   if filereadable(configPath)
     let result = ' -config ' . shellescape(configPath, 1)
   endif
diff --git a/python/Completion.py b/python/Completion.py
index 1b99149..9e9e79c 100644
--- a/python/Completion.py
+++ b/python/Completion.py
@@ -8,6 +8,10 @@ class Completion:
         parameters['WantDocumentationForEveryCompletionResult'] = \
             bool(int(vim.eval('g:omnicomplete_fetch_full_documentation')))
 
+        textBuffer = '\r\n'.join(vim.eval('s:textBuffer')[:])
+        enc = vim.eval('&encoding')
+        parameters['buffer'] = textBuffer.decode(enc).encode("utf-8")
+        response = syncrequest.get_response('/autocomplete', parameters)
         want_snippet = \
             bool(int(vim.eval('g:OmniSharp_want_snippet')))
 
diff --git a/python/OmniSharp.py b/python/OmniSharp.py
index 3fe8ab9..a5be181 100644
--- a/python/OmniSharp.py
+++ b/python/OmniSharp.py
@@ -13,13 +13,19 @@ logger.addHandler(hdlr)
 formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
 hdlr.setFormatter(formatter)
 
-
-def getResponse(endPoint, additional_parameters=None, timeout=None):
+def getVimParameters():
+    enc = vim.eval('&encoding')
+    buf = '\r\n'.join(vim.eval("getline(1,'$')")[:])
+    name = vim.current.buffer.name
     parameters = {}
     parameters['line'] = vim.eval('line(".")')
     parameters['column'] = vim.eval('col(".")')
-    parameters['buffer'] = '\r\n'.join(vim.eval("getline(1,'$')")[:])
-    parameters['filename'] = vim.current.buffer.name
+    parameters['buffer'] = buf.decode(enc).encode("utf-8")
+    parameters['filename'] = name.decode(enc).encode("utf-8")
+    return parameters
+
+def getResponse(endPoint, additional_parameters=None, timeout=None):
+    parameters = getVimParameters()
     if additional_parameters != None:
         parameters.update(additional_parameters)
 
diff --git a/python/asyncrequest.py b/python/asyncrequest.py
index 8ab1048..346a5b9 100644
--- a/python/asyncrequest.py
+++ b/python/asyncrequest.py
@@ -1,4 +1,5 @@
 import vim, urllib2, urllib, urlparse, logging, json, os, os.path, cgi, types, threading
+import OmniSharp
 
 class ThreadUrl(threading.Thread):
 
@@ -23,11 +24,7 @@ def urlopen_async(url, callback, data, timeout):
     thread.start()
 
 def get_response_async(endPoint, callback, params=None, timeout=None):
-    parameters = {}
-    parameters['line'] = vim.eval('line(".")')
-    parameters['column'] = vim.eval('col(".")')
-    parameters['buffer'] = '\r\n'.join(vim.eval("getline(1,'$')")[:])
-    parameters['filename'] = vim.current.buffer.name
+    parameters = OmniSharp.getVimParameters()
 
     if params is not None:
         parameters.update(params)
diff --git a/python/syncrequest.py b/python/syncrequest.py
index 0c63789..449566f 100644
--- a/python/syncrequest.py
+++ b/python/syncrequest.py
@@ -1,11 +1,8 @@
 import vim, urllib2, urllib, urlparse, json
+import OmniSharp
 
 def get_response(endPoint, params=None, timeout=None):
-    parameters = {}
-    parameters['line'] = vim.eval('line(".")')
-    parameters['column'] = vim.eval('col(".")')
-    parameters['buffer'] = '\r\n'.join(vim.eval("getline(1,'$')")[:])
-    parameters['filename'] = vim.current.buffer.name
+    parameters = OmniSharp.getVimParameters()
 
     if params is not None:
         parameters.update(params)
-- 
1.9.5.msysgit.1

